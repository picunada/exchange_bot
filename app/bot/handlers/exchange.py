from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from tortoise.expressions import Q

from bot.buttons.menu import menu, active_menu, check_menu, paid_menu, transaction_completed
from bot.bot import dp, bot
from bot.filters.admin import AdminFilter
from bot.states import Exchange
from core.config import Settings
from core.logger import log
from models import Users, Orders, Status, Banks, Rates, Manager
from utils.check_card_bin import check_bank

dp.filters_factory.bind(AdminFilter)
config = Settings()


@dp.message_handler(commands="start")
async def start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.full_name}!\n\n" "–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è "
                         "–±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ –≥—Ä–∏–≤–Ω—ã –Ω–∞ —Ä—É–±–ª—å.\n\n""–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –≥—Ä–∏–≤–Ω—É "
                         "–Ω–∞ "
                         "—Ä—É–±–ª—å \n\n""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±–º–µ–Ω–∞. \n\n""–ï—Å–ª–∏, "
                         "–í—ã —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å, —Ç–æ –≤–ø–µ—Ä–µ–¥!\n\n""‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è  –ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω  ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è", reply_markup=menu,
                         parse_mode="Markdown")
    print(message.from_user.id)
    print(type(message.from_user.id))


@dp.message_handler(Text(equals='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–º–µ–Ω—è–µ–º ‚ùå'), state='*')
@dp.message_handler(Text(equals='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–º–µ–Ω—è–µ–º ‚ùå', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    user_obj = await Users.get_or_none(chat_id=message.chat.id)
    current_state = await state.get_state()
    if current_state is Exchange.payment_process:
        data = await state.get_data()
        user_id = data.get("user_id")
        user_obj = await Users.get(chat_id=user_id)
        bot.send_message(chat_id=user_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç–∞–∫ –∏ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏\n\n"
                                               "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏–º!\n"
                                               "@supportbot")
    order_obj = await Orders.all().order_by("-id").get_or_none(user=user_obj).first()
    if order_obj is not None:
        status_obj, created = await Status.get_or_create(status="Canceled")
        await Orders.filter(id=order_obj.id).update(status=status_obj)
    await state.finish()
    await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=menu)


@dp.message_handler(Text(equals="–ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω üí∞üí∞üí∞"), state=None)
async def start_exchange(message: types.Message):
    n = 1000
    rate_obj = await Rates.all().order_by("-id").first()
    user_obj = await Users.get_or_none(chat_id=message.chat.id)
    if user_obj is None:
        await Users.create(username=message.from_user.username, chat_id=message.chat.id)
    await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å - {rate_obj.rate}\n\n" f"*–ø—Ä–∏–º–µ—Ä*: –∑–∞ {n} –≥—Ä–∏–≤–µ–Ω –≤—ã"
                         f" –ø–æ–ª—É—á–∏—Ç–µ {int(n * rate_obj.rate)} —Ä—É–±–ª–µ–π\n\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é"
                         " –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –≤ –≥—Ä–∏–≤–Ω–∞—Ö\n"
                         "*–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞* - 1000 –≥—Ä–Ω\n"
                         "*–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞* - 29000 –≥—Ä–Ω\n", reply_markup=active_menu,
                         parse_mode="Markdown")
    await Exchange.amount.set()


@dp.message_handler(state=Exchange.amount)
async def get_amount(message: types.Message,
                     state: FSMContext):
    if message.text is None:
        log.error("Message is None!")
    try:
        amount = int(message.text)
        if amount not in range(1000, 29001):
            raise ValueError("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç 1000 –¥–æ 29000")
        await state.update_data({
            "amount": amount
        })
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –≤ —Ä—É–±–ª—è—Ö",
                             reply_markup=active_menu)
        await Exchange.next()
    except Exception as e:
        await message.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        await Exchange.amount.set()
        log.error(e)


@dp.message_handler(state=Exchange.card_num)
async def check(message: types.Message,
                state: FSMContext):
    data = await state.get_data()
    amount = data.get("amount")
    card_number = message.text
    await state.update_data({
        "card_number": str(card_number)
    })
    rate_obj = await Rates.all().order_by("-id").first()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n\n"
                         f"–û—Ç–¥–∞–µ—Ç–µ - {amount} –≥—Ä–Ω\n"
                         f"–ü–æ–ª—É—á–∞–µ—Ç–µ - {int(amount * rate_obj.rate)} —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É {card_number}",
                         reply_markup=check_menu)
    await state.update_data({
        "user_id": message.from_user.id
    })
    await Exchange.next()


@dp.message_handler(Text(equals="–í—Å–µ –≤–µ—Ä–Ω–æ, –≥–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç—å! ‚úÖ"), state=Exchange.check)
async def admin_link(message: types.Message, state=FSMContext):
    try:
        data = await state.get_data()
        user_id = data.get("user_id")
        amount = data.get("amount")
        card_number = data.get("card_number")
        current_bank = check_bank(card_number)
        user_obj = await Users.get(chat_id=user_id)
        status_obj = await Status.get_or_none(status="New")
        rate_obj = await Rates.all().order_by("-id").first()
        if status_obj is None:
            status_obj = await Status.create(status="New")
        bank_obj = await Banks.get_or_none(bank_name=current_bank)
        if bank_obj is None:
            bank_obj = await Banks.create(bank_name=current_bank)
        await Orders.create(amount_before=amount, amount_after=int(amount * rate_obj.rate), rate=rate_obj,
                            withdraw_card=card_number, user=user_obj, manager=None, bank=bank_obj,
                            status=status_obj)
        count = 0
        admins = await Users.filter(is_admin=True).all()
        print(admins)
        for admin in admins:
            active_orders = await Orders.filter((Q(status=1) | Q(status=2)) & Q(manager=admin)).count()
            print(active_orders)
            if active_orders == 0:
                await bot.send_message(chat_id=admin.chat_id, text=f"@{message.from_user.username}:\n"
                                                                   f"card: {card_number}, amount in UAH: {amount}\n"
                                                                   f"amount in RUB: {int(amount * rate_obj.rate)}")
                await bot.send_message(chat_id=admin.chat_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É")
                await state.set_state_to_user(user=admin.chat_id, chat=admin.chat_id, state=Exchange.admin_link)
                await state.set_data_to_user(user=admin.chat_id, chat=admin.chat_id, data=data)
                count += 1
        if count == 0:
            await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∑–∞–Ω—è—Ç—ã")
        else:
            await message.answer("–í —Ç–µ—á–µ–Ω–∏–∏–µ 10 –º–∏–Ω—É—Ç –ø—Ä–∏–π–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã", reply_markup=active_menu)
    except Exception as e:
        log.error(e)


@dp.message_handler(state=Exchange.admin_link, is_admin=True)
async def payment_process(message: types.Message,
                          state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    admin_obj = await Users.get(chat_id=message.from_user.id)
    user_obj = await Users.get(chat_id=user_id)
    manager_obj = await Manager.get_or_none(user=admin_obj)
    if manager_obj is None:
        manager_obj = await Manager.create(user=admin_obj)
    await Orders.filter(user=user_obj).order_by("-id").first().update(manager=manager_obj)
    await bot.send_message(chat_id=user_id, text="–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ,"
                                                 " –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å."
                                                 " –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞–º –ø—Ä–∏–π–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ\n\n",
                           parse_mode="HTML")
    await bot.send_message(chat_id=user_id, text=f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {message.text}")
    await bot.send_message(chat_id=user_id, text="<a align=\"center\"> ‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ‚ö†Ô∏è </a>\n"
                                                 "–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç.\n"
                                                 "–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å,"
                                                 " –æ–±–º–µ–Ω –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                                                 " –ù–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π üòâ",
                           parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())
    await Exchange.next()
    await payment_accept(message, state)


@dp.message_handler(state=Exchange.admin_check, is_admin=True)
async def payment_accept(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    try:
        user_obj = await Users.get(chat_id=user_id)
        status_obj, created = await Status.get_or_create(status="Processed")
        await Orders.filter(user=user_obj).order_by("-id").first().update(status=status_obj)
        order_obj = await Orders.filter(user=user_obj).order_by("-id").prefetch_related("manager").first()
        await bot.send_message(chat_id=message.chat.id,
                               text=f"–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, id –∑–∞–∫–∞–∑–∞: {order_obj.id},"
                                    f" –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_obj.withdraw_card}\n"
                                    f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É\n"
                                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª‚úÖ", reply_markup=paid_menu)
        await Exchange.next()
    except Exception as e:
        log.error(e)


@dp.message_handler(Text(equals="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª‚úÖ"), state=Exchange.payment_process, is_admin=True)
async def payment_check(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    await Orders.filter(user=user_id).order_by("-id").first().update(is_paid=True)
    await bot.send_message(chat_id=user_id, text="–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã!\n"
                                                 "–î–µ–ª–∞–µ–º –≤–∞–º –ø–µ—Ä–µ–≤–æ–¥!")
    await message.answer("–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω",
                         reply_markup=transaction_completed)
    await Exchange.next()


@dp.message_handler(Text(equals="–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω"), state=Exchange.transaction_end)
async def transaction_end(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    user_obj = await Users.get(chat_id=user_id)
    order_obj = await Orders.all().order_by("-id").get_or_none(user=user_obj).first()
    await bot.send_message(chat_id=user_id, text=f"–û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n"
                                                 f"–ù–∞ –∫–∞—Ä—Ç—É {order_obj.withdraw_card}"
                                                 f" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {order_obj.amount_after} —Ä—É–±–ª–µ–π.", reply_markup=menu)

    status_obj, created = await Status.get_or_create(status="Finished")
    await Orders.filter(id=order_obj.id).update(status=status_obj)
    await state.set_state_to_user(user=user_id, chat=user_id, state=None)
    data.clear()
    active_orders = await Orders.filter((Q(status=1) | Q(status=2)) & Q(manager=None)).get_or_none()
    if active_orders is None:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
    else:
        new_order = await active_orders.first()
        await state.reset_data()
        await state.set_state(Exchange.admin_link)
        await state.update_data({
            "user_id": new_order.user.chat_id
        })


@dp.message_handler(commands="get_order_status")
async def get_order_status(message: types.Message):
    try:
        user_obj = await Users.get_or_none(chat_id=message.chat.id)
        if user_obj is None:
            await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É exchange")
            return
        order_obj = await Orders.get_or_none(user=user_obj).prefetch_related('status')
        current_order = await Orders.from_tortoise_orm(order_obj)
        await message.answer(f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞({current_order.id}): {order_obj.status.status}")
    except Exception as e:
        log.error(e)
